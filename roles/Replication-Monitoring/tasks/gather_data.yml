- name: Find all log files in the replication monitoring directory
  ansible.builtin.find:
    paths: "{{ replication_monitoring_log_dir }}"
    patterns: "access*"
  register: log_files

- name: Check if log files exist
  ansible.builtin.fail:
    msg: "No log files found in {{ replication_monitoring_log_dir }}"
  when: log_files.files | length == 0

- name: Get checksum of local dslogs.py script
  ansible.builtin.stat:
    path: "{{ role_path }}/scripts/dslogs.py"
    get_checksum: true
    get_mime: true
  delegate_to: localhost
  register: local_dslogs_script_checksum
  run_once: true

- name: Check if dslogs.py script exists with the same checksum on the target machine
  ansible.builtin.stat:
    path: "{{ replication_monitoring_tmp_dslogs_script_path }}"
    get_checksum: true
    get_mime: true
  register: remote_dslogs_script

- name: Copy dslogs script to the target machine if checksum differs or file doesn't exist
  ansible.builtin.copy:
    src: "{{ role_path }}/scripts/dslogs.py"
    dest: "{{ replication_monitoring_tmp_dslogs_script_path }}"
    mode: "0755"
  when: >
    not remote_dslogs_script.stat.exists or
    remote_dslogs_script.stat.checksum != local_dslogs_script_checksum.stat.checksum

- name: Execute dslogs script with output file option
  ansible.builtin.command:
    cmd: >
      python3 {{ replication_monitoring_tmp_dslogs_script_path }}
      {% for file in log_files.files %}
      {% set normalized_dir = replication_monitoring_log_dir | regex_replace('/$', '') %}
      {% if file.path.startswith(normalized_dir + '/access') %}
      {{ file.path }}
      {% endif %}
      {% endfor %}
      -o "{{ replication_monitoring_tmp_dslogs_output_file_path }}"
    chdir: "{{ replication_monitoring_log_dir }}"
    creates: "{{ replication_monitoring_tmp_dslogs_output_file_path }}"

- name: Copy dslogs output file to controller with server name in filename
  ansible.builtin.fetch:
    src: "{{ replication_monitoring_tmp_dslogs_output_file_path }}"
    dest: "{{ replication_monitoring_tmp_dslogs_output_file_path }}"
    flat: true

- name: Run merge_dslogs script on the controller
  ansible.builtin.command:
    cmd: >
      python3 {{ role_path }}/scripts/merge_dslogs.py -o {{ replication_monitoring_tmp_merged_output_file_path }}
      {% for host in groups['all'] %}
      "{{ replication_monitoring_tmp_path }}/{{ hostvars[host]['inventory_hostname'] }}_dslogs_output.json"
      {% endfor %}
    creates: "{{ replication_monitoring_tmp_merged_output_file_path }}"
  delegate_to: localhost
  run_once: true
